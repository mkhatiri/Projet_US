#include <iostream>
#include <unistd.h>
#include <string>
#include <list>
#include <stdio.h>
#include <string.h>
#include "tbb/concurrent_queue.h"
#include <stdlib.h>
#include "streamUtils.hpp"
#include <cstdlib>
#include <iterator>
//#include <assert.h> 
#include <cuda_runtime_api.h>
#include <cusparse_v2.h>
#include <cublas_v2.h>
#include "helper_cuda.h"

#define ROW_BITS 32
#define WG_BITS 24
using namespace std;

static inline unsigned int flp2(unsigned int x)
{
    x |= (x >> 1);
    x |= (x >> 2);
    x |= (x >> 4);
    x |= (x >> 8);
    x |= (x >> 16);
    return x - (x >> 1);
}


template <typename VertexType, typename EdgeType>
static inline EdgeType numThreadsForReduction(const VertexType num_rows)
{
    return (EdgeType) flp2(256/num_rows);
}


template <typename VertexType, typename EdgeType>
void ComputeRowBlocks( EdgeType* rowBlocks, EdgeType& rowBlockSize, const EdgeType* xadj,
                       const EdgeType nRows, const int blkSize, const int blkMultiplier, 
		       const int rows_for_vector, const bool allocate_row_blocks = true )
{
    EdgeType* rowBlocksBase;
    EdgeType total_row_blocks = 1; // Start at one because of rowBlock[0]

    if (allocate_row_blocks)
    {
        rowBlocksBase = rowBlocks;
        *rowBlocks = 0;
        rowBlocks++;
    }
    EdgeType sum = 0;
    EdgeType i, last_i = 0;

    // Check to ensure nRows can fit in 32 bits
    if( (EdgeType)nRows > (EdgeType)pow( 2, ROW_BITS ) )
    {
        printf( "Number of Rows in the Sparse Matrix is greater than what is supported at present (%d bits) !", ROW_BITS );
        return;
    }

    EdgeType consecutive_long_rows = 0;
    for( i = 1; i <= nRows; i++ )
    {
        EdgeType row_length = ( xadj[ i ] - xadj[ i - 1 ] );
        sum += row_length;

        // The following section of code calculates whether you're moving between
        // a series of "short" rows and a series of "long" rows.
        // This is because the reduction in CSR-Adaptive likes things to be
        // roughly the same length. Long rows can be reduced horizontally.
        // Short rows can be reduced one-thread-per-row. Try not to mix them.
        if ( row_length > 128 )
            consecutive_long_rows++;
        else if ( consecutive_long_rows > 0 )
        {
            // If it turns out we WERE in a long-row region, cut if off now.
            if (row_length < 32) // Now we're in a short-row region
                consecutive_long_rows = -1;
            else
                consecutive_long_rows++;
        }

        // If you just entered into a "long" row from a series of short rows,
        // then we need to make sure we cut off those short rows. Put them in
        // their own workgroup.
        if ( consecutive_long_rows == 1 )
        {
            // Assuming there *was* a previous workgroup. If not, nothing to do here.
            if( i - last_i > 1 )
            {
                if (allocate_row_blocks)
                {
                    *rowBlocks = ( (i - 1) << (64 - ROW_BITS) );
                    // If this row fits into CSR-Stream, calculate how many rows
                    // can be used to do a parallel reduction.
                    // Fill in the low-order bits with the numThreadsForRed
                    if (((i-1) - last_i) > rows_for_vector)
                        *(rowBlocks-1) |= numThreadsForReduction<VertexType,EdgeType>((i - 1) - last_i);
                    rowBlocks++;
                }
                total_row_blocks++;
                last_i = i-1;
                sum = row_length;
            }
        }
        else if (consecutive_long_rows == -1)
        {
            // We see the first short row after some long ones that
            // didn't previously fill up a rssertow block.
            if (allocate_row_blocks)
            {
                *rowBlocks = ( (i - 1) << (64 - ROW_BITS) );
                if (((i-1) - last_i) > rows_for_vector)
                    *(rowBlocks-1) |= numThreadsForReduction<VertexType,EdgeType>((i - 1) - last_i);
                rowBlocks++;
            }
            total_row_blocks++;
            last_i = i-1;
            sum = row_length;
            consecutive_long_rows = 0;
         }

        // Now, what's up with this row? What did it do?

        // exactly one row results in non-zero elements to be greater than blockSize
        // This is csr-vector case; bottom WG_BITS == workgroup ID
        if( ( i - last_i == 1 ) && sum > blkSize )
        {
            int numWGReq = static_cast< int >( ceil( (double)row_length / (blkMultiplier*blkSize) ) );

            // Check to ensure #workgroups can fit in WG_BITS bits, if not
            // then the last workgroup will do all the remaining work
            numWGReq = ( numWGReq < (int)pow( 2, WG_BITS ) ) ? numWGReq : (int)pow( 2, WG_BITS );

            if (allocate_row_blocks)
            {
                for( int w = 1; w < numWGReq; w++ )
                {
                    *rowBlocks = ( (i - 1) << (64 - ROW_BITS) );
                    *rowBlocks |= static_cast< EdgeType >( w );
                    rowBlocks++;
                }
                *rowBlocks = ( i << (64 - ROW_BITS) );
                rowBlocks++;
            }
            total_row_blocks += numWGReq;
            last_i = i;
            sum = 0;
            consecutive_long_rows = 0;
        }
        // more than one row results in non-zero elements to be greater than blockSize
        // This is csr-stream case; bottom WG_BITS = number of parallel reduction threads
        else if( ( i - last_i > 1 ) && sum > blkSize )
        {
            i--; // This row won't fit, so back off one.
            if (allocate_row_blocks)
            {
                *rowBlocks = ( i << (64 - ROW_BITS) );
                if ((i - last_i) > rows_for_vector)
                    *(rowBlocks-1) |= numThreadsForReduction<VertexType,EdgeType>(i - last_i);
                rowBlocks++;
            }
            total_row_blocks++;
            last_i = i;
            sum = 0;
            consecutive_long_rows = 0;
        }
        // This is csr-stream case; bottom WG_BITS = number of parallel reduction threads
        else if( sum == blkSize )
        {
            if (allocate_row_blocks)
            {
                *rowBlocks = ( i << (64 - ROW_BITS) );
                if ((i - last_i) > rows_for_vector)
                    *(rowBlocks-1) |= numThreadsForReduction<VertexType,EdgeType>(i - last_i);
                rowBlocks++;
            }
            total_row_blocks++;
            last_i = i;
            sum = 0;
            consecutive_long_rows = 0;
        }
    }

	    // If we didn't fill a row block with the last row, make sure we don't lose it.
	 if ( allocate_row_blocks && (*(rowBlocks-1) >> (64 - ROW_BITS)) != static_cast< EdgeType>(nRows) )
    {
        *rowBlocks = ( static_cast< EdgeType >( nRows ) << (64 - ROW_BITS) );
        if ((nRows - last_i) > rows_for_vector)
            *(rowBlocks-1) |= numThreadsForReduction<VertexType,EdgeType>(i - last_i);
        rowBlocks++;
    }
    total_row_blocks++;

    if (allocate_row_blocks)
    {
        size_t dist = std::distance( rowBlocksBase, rowBlocks );
       // assert( (2 * dist) <= rowBlockSize );
        // Update the size of rowBlocks to reflect the actual amount of memory used
        // We're multiplying the size by two because the extended precision form of
        // CSR-Adaptive requires more space for the final global reduction.
        rowBlockSize = 2 * dist;
    }
    else
        rowBlockSize = 2 * total_row_blocks;
}

template <typename VertexType, typename EdgeType>
inline size_t ComputeRowBlocksSize( const EdgeType* rowDelimiters, const EdgeType nRows, const unsigned int blkSize,
                                    const unsigned int blkMultiplier, const unsigned int rows_for_vector )
{
    EdgeType rowBlockSize;
    ComputeRowBlocks<VertexType, EdgeType>( NULL, rowBlockSize, rowDelimiters, nRows, blkSize, blkMultiplier, rows_for_vector, false );
    return rowBlockSize;
}

/*
int main(int argc, char* ARGV[]){


        unsigned int x = atoi(ARGV[1]); 
        int numT = numThreadsForReduction<int,int,float>(x);
	std::cout << " numT " << numT << std::endl;
    }

*/

template
static int numThreadsForReduction(const int num_rows); 

template 
void ComputeRowBlocks<int,int>( int* rowBlocks, int& rowBlockSize, const int* xadj,
                       const int nRows, const int blkSize, const int blkMultiplier,
                       const int rows_for_vector, const bool allocate_row_blocks = true );


template 
size_t ComputeRowBlocksSize<int,int>( const int* rowDelimiters, const int nRows, const unsigned int blkSize, const unsigned int blkMultiplier, const unsigned int rows_for_vector );



